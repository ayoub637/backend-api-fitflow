openapi: 3.0.0
info:
  title: FitFlow API
  description: API for authentication, users, exercises, and AI chat.
  version: 1.0.0

servers:
  - url: http://localhost:8000/api

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Registration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'

  /auth/login:
    post:
      summary: Log in
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Incorrect credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'

  /auth/me:
    get:
      summary: Get current user information
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'

  /auth/logout:
    post:
      summary: Log out
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Session successfully closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'

  /users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
    put:
      summary: Update a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccessResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
    delete:
      summary: Delete a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /exercises:
    get:
      summary: Get all exercises
      tags: [Exercises]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of exercises
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExercisesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseErrorResponse'

  /exercises/{id}:
    get:
      summary: Get an exercise by ID
      tags: [Exercises]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Exercise ID
      responses:
        '200':
          description: Exercise found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseResponse'
        '404':
          description: Exercise not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseErrorResponse'
    delete:
      summary: Delete exercise-user 
      tags: [Exercises]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Exercise ID
      responses:
        '200':
          description: Relationship deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '404':
          description: Exercise not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseErrorResponse'

  /chat:
    post:
      summary: Send a message to chat
      tags: [Chat]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Agent's response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Error processing the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Operation completed successfully'

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: 'user123'
        email:
          type: string
          example: 'user@example.com'
        password:
          type: string
          example: 'Password123'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: 'user@example.com'
        password:
          type: string
          example: 'Password123'

    User:
      type: object
      properties:
        _id:
          type: string
          example: '6095c27b8e147a001c8f2a5d'
        username:
          type: string
          example: 'user123'
        email:
          type: string
          example: 'user@example.com'

    AuthUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

    AuthSuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/AuthUser'

    AuthErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 'Incorrect credentials'

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: 'newName'
        email:
          type: string
          example: 'new@email.com'
        password:
          type: string
          example: 'NewPassword123'

    UserSuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    UsersResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    UserErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 'User not found'

    Exercise:
      type: object
      properties:
        _id:
          type: string
          example: '60c72b2f9f1b2c001c8a35b6'
        name:
          type: string
          example: 'Push-up'
        muscleGroup:
          type: string
          example: 'Pectorals'
        equipment:
          type: string
          example: 'None'
        difficulty:
          type: string
          example: 'Medium'
        description:
          type: string
          example: 'An upper body exercise for chest muscles.'
        addedAt:
          type: string
          format: date-time
          example: '2023-01-01T12:00:00Z'

    ExerciseResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            exercise:
              $ref: '#/components/schemas/Exercise'

    ExercisesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            exercises:
              type: array
              items:
                $ref: '#/components/schemas/Exercise'

    ExerciseErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 'Error retrieving exercises'

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Recommend exercises to biceps.'

    ChatResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            response:
              type: string
              example: 'To strengthen your arms, I recommend the following exercises...'
            exercises:
              type: array
              items:
                $ref: '#/components/schemas/Exercise'
              description: 'List of recommended exercises (if any)'

    ChatErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 'Error processing the message'
